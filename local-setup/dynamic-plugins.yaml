plugins:
  # Group: Github
  - package: ./dynamic-plugins/dist/backstage-plugin-catalog-backend-module-github-dynamic
    disabled: true
    pluginConfig:
      catalog:
        providers:
          github:
            providerId:
              organization: "${GITHUB_ORG}"
  - package: ./dynamic-plugins/dist/backstage-plugin-catalog-backend-module-github-org-dynamic
    disabled: true
    pluginConfig:
      catalog:
        providers:
          githubOrg:
            default:
              id: production
              orgUrl: "${GITHUB_ORG_URL}"
  - package: ./dynamic-plugins/dist/backstage-plugin-github-actions
    disabled: true
    pluginConfig:
      dynamicPlugins:
        frontend:
          backstage.plugin-github-actions:
            mountPoints:
              - mountPoint: entity.page.ci/cards
                importName: EntityGithubActionsContent
                config:
                  layout:
                    gridColumn: "1 / -1"
                  if:
                    allOf:
                      - isGithubActionsAvailable
  - package:  ./dynamic-plugins/dist/backstage-plugin-github-issues
    disabled: true
    pluginConfig:
      dynamicPlugins:
        frontend:
          backstage.plugin-github-issues:
            mountPoints:
              - mountPoint: entity.page.issues/cards
                importName: GithubIssuesCard
                config:
                  layout:
                    gridColumn: "1 / -1"
                  if:
                    allOf:
                      - hasAnnotation: github.com/project-slug
  - package: ./dynamic-plugins/dist/roadiehq-backstage-plugin-github-insights
    disabled: true
    pluginConfig:
      dynamicPlugins:
        frontend:
          roadiehq.backstage-plugin-github-insights:
            mountPoints:
              - mountPoint: entity.page.overview/cards
                importName: EntityGithubInsightsComplianceCard
                config:
                  layout:
                    gridColumnEnd:
                      lg: "span 4"
                      md: "span 6"
                      xs: "span 12"
                  if:
                    allOf:
                      - isGithubInsightsAvailable
  - package: ./dynamic-plugins/dist/roadiehq-backstage-plugin-github-pull-requests
    disabled: true
    pluginConfig:
      dynamicPlugins:
        frontend:
          roadiehq.backstage-plugin-github-pull-requests:
            mountPoints:
              - mountPoint: entity.page.overview/cards
                importName: EntityGithubPullRequestsOverviewCard
                config:
                  layout:
                    gridColumnEnd:
                      lg: "span 4"
                      md: "span 6"
                      xs: "span 12"
                  if:
                    allOf:
                      - isGithubPullRequestsAvailable
              - mountPoint: entity.page.pull-requests/cards
                importName: EntityGithubPullRequestsContent
                config:
                  layout:
                    gridColumn: "1 / -1"
                  if:
                    allOf:
                      - isGithubPullRequestsAvailable
  - package: ./dynamic-plugins/dist/roadiehq-backstage-plugin-security-insights
    disabled: true
    pluginConfig:
      dynamicPlugins:
        frontend:
          roadiehq.backstage-plugin-security-insights:
            mountPoints:
              - mountPoint: entity.page.overview/cards
                importName: EntityDependabotAlertsCard
                config:
                  layout:
                    gridColumnEnd:
                      lg: "span 4"
                      md: "span 6"
                      xs: "span 12"
                  if:
                    allOf:
                      - isSecurityInsightsAvailable

  # Group: Kubernetes
  - package: ./dynamic-plugins/dist/backstage-plugin-kubernetes-backend-dynamic
    disabled: true
    pluginConfig:
      kubernetes:
        customResources:
          - group: 'tekton.dev'
            apiVersion: 'v1beta1'
            plural: 'pipelines'
          - group: 'tekton.dev'
            apiVersion: 'v1beta1'
            plural: 'pipelineruns'
          - group: 'tekton.dev'
            apiVersion: 'v1beta1'
            plural: 'taskruns'
          - group: 'route.openshift.io'
            apiVersion: 'v1'
            plural: 'routes'
        serviceLocatorMethod:
          type: 'multiTenant'
        clusterLocatorMethods:
          - type: 'config'
            clusters:
              - name: ${K8S_CLUSTER_NAME}
                url: ${K8S_CLUSTER_URL}
                authProvider: 'serviceAccount'
                skipTLSVerify: true
                serviceAccountToken: ${K8S_CLUSTER_TOKEN}
  - package: ./dynamic-plugins/dist/backstage-plugin-kubernetes
    disabled: true
    pluginConfig:
      dynamicPlugins:
        frontend:
          backstage.plugin-kubernetes:
            mountPoints:
              - mountPoint: entity.page.kubernetes/cards
                importName: EntityKubernetesContent
                config:
                  layout:
                    gridColumn: "1 / -1"
                  if:
                    anyOf:
                      - hasAnnotation: backstage.io/kubernetes-id
                      - hasAnnotation: backstage.io/kubernetes-namespace
  - package: ./dynamic-plugins/dist/janus-idp-backstage-plugin-topology
    disabled: true
    pluginConfig:
      dynamicPlugins:
        frontend:
          janus-idp.backstage-plugin-topology:
            mountPoints:
              - mountPoint: entity.page.topology/cards
                importName: TopologyPage
                config:
                  layout:
                    gridColumn: "1 / -1"
                    height: 75vh
                  if:
                    anyOf:
                      - hasAnnotation: backstage.io/kubernetes-id
                      - hasAnnotation: backstage.io/kubernetes-namespace

  # Group: ArgoCD
  - package: ./dynamic-plugins/dist/roadiehq-backstage-plugin-argo-cd-backend-dynamic
    disabled: true
    pluginConfig:
      argocd:
        username: "${ARGOCD_USERNAME}"
        password: "${ARGOCD_PASSWORD}"
        appLocatorMethods:
          - type: 'config'
            instances:
              - name: argoInstance1
                url: "${ARGOCD_INSTANCE1_URL}"
                token: "${ARGOCD_AUTH_TOKEN}"
              - name: argoInstance2
                url: "${ARGOCD_INSTANCE2_URL}"
                token: "${ARGOCD_AUTH_TOKEN2}"
  - package: ./dynamic-plugins/dist/roadiehq-scaffolder-backend-argocd-dynamic
    disabled: true
    pluginConfig:
      argocd:
        username: "${ARGOCD_USERNAME}"
        password: "${ARGOCD_PASSWORD}"
        appLocatorMethods:
          - type: 'config'
            instances:
              - name: argoInstance1
                url: "${ARGOCD_INSTANCE1_URL}"
                token: "${ARGOCD_AUTH_TOKEN}"
              - name: argoInstance2
                url: "${ARGOCD_INSTANCE2_URL}"
                token: "${ARGOCD_AUTH_TOKEN2}"
  - package: ./dynamic-plugins/dist/roadiehq-backstage-plugin-argo-cd
    disabled: true
    pluginConfig:
      dynamicPlugins:
        frontend:
          roadiehq.backstage-plugin-argo-cd:
            mountPoints:
              - mountPoint: entity.page.overview/cards
                importName: EntityArgoCDOverviewCard
                config:
                  layout:
                    gridColumnEnd:
                      lg: "span 8"
                      xs: "span 12"
                  if:
                    allOf:
                      - isArgocdAvailable
              - mountPoint: entity.page.cd/cards
                importName: EntityArgoCDHistoryCard
                config:
                  layout:
                    gridColumn: "1 / -1"
                  if:
                    allOf:
                      - isArgocdAvailable

  # Techdocs
  - package: ./dynamic-plugins/dist/backstage-plugin-techdocs-backend-dynamic
    disabled: true
    pluginConfig:
      # Reference documentation http://backstage.io/docs/features/techdocs/configuration
      # Note: After experimenting with basic setup, use CI/CD to generate docs
      # and an external cloud storage when deploying TechDocs for production use-case.
      # https://backstage.io/docs/features/techdocs/how-to-guides#how-to-migrate-from-techdocs-basic-to-recommended-deployment-approach
      techdocs:
        builder: ${TECHDOCS_BUILDER_TYPE}
        generator:
          runIn: ${TECHDOCS_GENERATOR_TYPE}
        publisher:
          type: ${TECHDOCS_PUBLISHER_TYPE}
          awsS3:
            bucketName: ${BUCKET_NAME}
            region: ${BUCKET_REGION_VAULT}
            endpoint: ${BUCKET_URL}
            s3ForcePathStyle: true
            credentials:
              accessKeyId: ${AWS_ACCESS_KEY_ID}
              secretAccessKey: ${AWS_SECRET_ACCESS_KEY}
  - package: ./dynamic-plugins/dist/backstage-plugin-techdocs
    disabled: true
    pluginConfig:
      dynamicPlugins:
        frontend:
          backstage.plugin-techdocs:
            routeBindings:
              targets:
                - importName: techdocsPlugin
              bindings:
                - bindTarget: catalogPlugin.externalRoutes
                  bindMap:
                    viewTechDoc: techdocsPlugin.routes.docRoot
                - bindTarget: scaffolderPlugin.externalRoutes
                  bindMap:
                    viewTechDoc: techdocsPlugin.routes.docRoot
            dynamicRoutes:
              - path: /docs
                importName: TechDocsIndexPage
                menuItem:
                  icon: docs
                  text: Docs
              - path: /docs/:namespace/:kind/:name/*
                importName: TechDocsReaderPage
            mountPoints:
              - mountPoint: entity.page.docs/cards
                importName: EntityTechdocsContent
                config:
                  layout:
                    gridColumn: "1 / -1"
                  if:
                    allOf:
                      - isTechDocsAvailable
              - mountPoint: search.page.results
                importName: TechDocsSearchResultListItem
              - mountPoint: search.page.filters
                importName: TechdocsSearchFilter
              - mountPoint: search.page.types
                importName: techdocsSearchType
                config:
                  props:
                    name: Documentation
                    icon: docs

  # Standalone plugins
  - package: ./dynamic-plugins/dist/roadiehq-scaffolder-backend-module-utils-dynamic

  - package: ./dynamic-plugins/dist/janus-idp-backstage-scaffolder-backend-module-quay-dynamic

  - package: ./dynamic-plugins/dist/janus-idp-backstage-scaffolder-backend-module-regex-dynamic

  - package: ./dynamic-plugins/dist/janus-idp-backstage-scaffolder-backend-module-servicenow-dynamic
    disabled: true
    pluginConfig:
      servicenow:
        # The base url of the ServiceNow instance.
        baseUrl: ${SERVICENOW_BASE_URL}
        # The username to use for authentication.
        username: ${SERVICENOW_USERNAME}
        # The password to use for authentication.
        password: ${SERVICENOW_PASSWORD}

  - package: ./dynamic-plugins/dist/janus-idp-backstage-scaffolder-backend-module-sonarqube-dynamic
    disabled: true

  - package: ./dynamic-plugins/dist/janus-idp-backstage-plugin-aap-backend-dynamic
    disabled: true
    pluginConfig:
      catalog:
        providers:
          aap:
            prod:
              baseUrl: '${AAP_BASE_URL}'
              authorization: "${AAP_AUTH_TOKEN}"

  - package: ./dynamic-plugins/dist/janus-idp-backstage-plugin-3scale-backend-dynamic
    disabled: true
    pluginConfig:
      catalog:
        providers:
          threeScaleApiEntity:
            default:
              baseUrl: '${3SCALE_BASE_URL}'
              accessToken: '${3SCALE_ACCESS_TOKEN}'

  - package: ./dynamic-plugins/dist/janus-idp-backstage-plugin-keycloak-backend-dynamic
    disabled: true
    pluginConfig:
      catalog:
        providers:
          keycloakOrg:
            default:
              baseUrl: "${KEYCLOAK_BASE_URL}"
              loginRealm: "${KEYCLOAK_LOGIN_REALM}"
              realm: "${KEYCLOAK_REALM}"
              clientId: "${KEYCLOAK_CLIENT_ID}"
              clientSecret: "${KEYCLOAK_CLIENT_SECRET}"

  - package: ./dynamic-plugins/dist/backstage-plugin-dynatrace
    disabled: true
    pluginConfig:
      dynamicPlugins:
        frontend:
          backstage.plugin-dynatrace:
            mountPoints:
              - mountPoint: entity.page.monitoring/cards
                importName: DynatraceTab
                config:
                  layout:
                    gridColumn: "1 / -1"
                  if:
                    allOf:
                      - isDynatraceAvailable

  - package: ./dynamic-plugins/dist/janus-idp-backstage-plugin-quay
    disabled: true
    pluginConfig:
      dynamicPlugins:
        frontend:
          janus-idp.backstage-plugin-quay:
            mountPoints:
              - mountPoint: entity.page.image-registry/cards
                importName: QuayPage
                config:
                  layout:
                    gridColumn: 1 / -1
                  if:
                    anyOf:
                    - isQuayAvailable
