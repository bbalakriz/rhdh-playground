{"version":3,"file":"index.cjs.js","sources":["../src/actions/createQuayRepository.ts","../src/dynamic/index.ts"],"sourcesContent":["import { createTemplateAction } from '@backstage/plugin-scaffolder-node';\n\nexport interface ResponseBody {\n  namespace: string;\n  name: string;\n  kind: string;\n}\nexport interface ResponseErrorBody {\n  detail: string;\n  error_message: string;\n  error_type: string;\n  title: string;\n  type: string;\n  status: number;\n}\ninterface RequestBody {\n  repository: string;\n  visibility: string;\n  namespace?: string;\n  description: string;\n  repo_kind?: string;\n}\n\ntype TemplateActionParameters = {\n  name: string;\n  visibility: string;\n  description: string;\n  token: string;\n  baseUrl?: string;\n  namespace?: string;\n  repoKind?: string;\n};\n\nconst getUrl = (url: string | undefined): string => {\n  if (!url) {\n    return 'https://quay.io';\n  }\n  try {\n    // eslint-disable-next-line no-new\n    new URL(url);\n  } catch (error) {\n    throw new Error('\"baseUrl\" is invalid');\n  }\n  return url;\n};\n\nconst isValueValid = (\n  value: string | undefined,\n  valueName: string,\n  valueOpts: Array<string | undefined>,\n) => {\n  if (valueOpts.includes(value)) {\n    return;\n  }\n  throw new Error(\n    `For the \"${valueName}\" parameter \"${value}\" is not a valid option,` +\n      ` available options are: ${valueOpts.map(v => v || 'none').join(', ')}`,\n  );\n};\n\nexport function createQuayRepositoryAction() {\n  return createTemplateAction<TemplateActionParameters>({\n    id: 'quay:create-repository',\n    description: 'Create an quay image repository',\n    schema: {\n      input: {\n        type: 'object',\n        required: ['name', 'visibility', 'description', 'token'],\n        properties: {\n          name: {\n            title: 'Repository name',\n            description: 'Name of the repository to be created',\n            type: 'string',\n          },\n          visibility: {\n            title: 'Visibility setting',\n            description:\n              'Visibility setting for the created repository, either public or private',\n            type: 'string',\n          },\n          description: {\n            title: 'Repository description',\n            description: 'The repository desription',\n            type: 'string',\n          },\n          token: {\n            title: 'Token',\n            description: 'Bearer token used for authorization',\n            type: 'string',\n          },\n          baseUrl: {\n            title: 'Base URL',\n            description:\n              'URL of your quay instance, set to \"https://quay.io\" by default',\n            type: 'string',\n          },\n          namespace: {\n            title: 'Namespace',\n            description:\n              'Namespace in which to create the repository, by default the users namespace',\n            type: 'string',\n          },\n          repoKind: {\n            title: 'Repository kind',\n            description:\n              'The crated repository type either image or an application, if empty image will be used',\n            type: 'string',\n          },\n        },\n      },\n      output: {\n        type: 'object',\n        properties: {\n          repositoryUrl: {\n            title: 'Quay image repository URL',\n            type: 'string',\n            description: 'Created repository URL link',\n          },\n        },\n      },\n    },\n    async handler(ctx) {\n      const { token, name, visibility, namespace, description, repoKind } =\n        ctx.input;\n      const baseUrl = getUrl(ctx.input.baseUrl);\n      isValueValid(visibility, 'visibility', ['public', 'private']);\n      isValueValid(repoKind, 'repository kind', [\n        'application',\n        'image',\n        undefined,\n      ]);\n\n      const params: RequestBody = {\n        description,\n        repository: name,\n        visibility,\n        namespace,\n        repo_kind: repoKind,\n      };\n\n      const uri = encodeURI(`${baseUrl}/api/v1/repository`);\n      const response = await fetch(uri, {\n        headers: {\n          'Content-Type': 'application/json',\n          Accept: 'application/json',\n          Authorization: `Bearer ${token}`,\n        },\n        body: JSON.stringify(params),\n        method: 'POST',\n      });\n\n      if (!response.ok) {\n        const errorBody = (await response.json()) as ResponseErrorBody;\n        const errorStatus = errorBody.status || response.status;\n        // Some error responses don't have the structure defined in ResponseErrorBody\n        const errorMsg = errorBody.detail || (errorBody as any).error;\n        throw new Error(\n          `Failed to create Quay repository, ${errorStatus} -- ${errorMsg}`,\n        );\n      }\n\n      const body = (await response.json()) as ResponseBody;\n      ctx.output(\n        'repositoryUrl',\n        `${baseUrl}/repository/${body.namespace}/${body.name}`,\n      );\n    },\n  });\n}\n","import { BackendDynamicPluginInstaller } from '@backstage/backend-plugin-manager';\n\nimport { createQuayRepositoryAction } from '../actions';\n\nexport const dynamicPluginInstaller: BackendDynamicPluginInstaller = {\n  kind: 'legacy',\n  scaffolder: () => [createQuayRepositoryAction()],\n};\n"],"names":["createTemplateAction"],"mappings":"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"}