{"version":3,"file":"index.cjs.js","sources":["../src/actions/regex/replace.ts","../src/dynamic/index.ts"],"sourcesContent":["import { createTemplateAction } from '@backstage/plugin-scaffolder-node';\n\nimport yaml from 'yaml';\nimport { z } from 'zod';\n\nconst schemaInput = z.object({\n  regExps: z.array(\n    z.object({\n      pattern: z\n        .string()\n        .refine(\n          // You should not parse a regex (regular language) with a regex (regular language),\n          // you actually need a context free grammar to parse a regex (regular language).\n          // Hence, we are using a string comparison here.\n          value =>\n            !(\n              value.charAt(0) === '/' && value.charAt(value.length - 1) === '/'\n            ),\n          {\n            message:\n              'The RegExp constructor cannot take a string pattern with a leading and trailing forward slash.',\n          },\n        )\n        .describe(\n          'The regex pattern to match the value like in String.prototype.replace()',\n        ),\n      flags: z\n        .array(\n          // FIXME: changed from z.set() because that breaks zod-to-json-schema parser in unknown way.\n          z.enum(['g', 'm', 'i', 'y', 'u', 's', 'd'], {\n            invalid_type_error:\n              'Invalid flag, possible values are: g, m, i, y, u, s, d',\n          }),\n        )\n        .optional()\n        .describe('The flags for the regex'),\n      replacement: z\n        .string()\n        .describe(\n          'The replacement value for the regex like in String.prototype.replace()',\n        ),\n      values: z.array(\n        z.object({\n          key: z.string().describe('The key to access the regex value'),\n          value: z.string().describe('The input value of the regex'),\n        }),\n      ),\n    }),\n  ),\n});\n\nconst exampleValue =\n  'The quick brown fox jumps over the lazy dog. If the dog reacted, was it really lazy?';\n\nconst id = 'regex:replace';\n\nconst examples = [\n  {\n    description: 'Create a regex to capture the first word of a string',\n    example: yaml.stringify({\n      steps: [\n        {\n          id: 'regexValues',\n          action: id,\n          name: 'Regex Values',\n          input: {\n            regExps: [\n              {\n                pattern: '^(\\\\S+).*$',\n                replacement: '$1',\n                values: [\n                  { key: 'eg1', value: 'Hello world!' },\n                  { key: 'eg2', value: 'Test world!' },\n                ],\n              },\n            ],\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description: 'Create a regex to replace a word in a string',\n    example: yaml.stringify({\n      steps: [\n        {\n          id: 'regexValues',\n          action: id,\n          name: 'Regex Values',\n          input: {\n            regExps: [\n              {\n                pattern: 'dog',\n                replacement: 'monkey',\n                values: [\n                  {\n                    key: 'eg1',\n                    value: exampleValue,\n                  },\n                ],\n              },\n              {\n                pattern: 'Dog',\n                replacement: 'ferret',\n                flags: ['i'],\n                values: [\n                  {\n                    key: 'eg2',\n                    value: exampleValue,\n                  },\n                ],\n              },\n            ],\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description: 'Create a regex to replace a word globally in a string',\n    example: yaml.stringify({\n      steps: [\n        {\n          id: 'regexValues',\n          action: id,\n          name: 'Regex Values',\n          input: {\n            regExps: [\n              {\n                pattern: 'dog',\n                replacement: 'monkey',\n                flags: ['g'],\n                values: [\n                  {\n                    key: 'eg1',\n                    value: exampleValue,\n                  },\n                ],\n              },\n              {\n                pattern: 'Dog',\n                replacement: 'ferret',\n                flags: ['gi'],\n                values: [\n                  {\n                    key: 'eg2',\n                    value: exampleValue,\n                  },\n                ],\n              },\n            ],\n          },\n        },\n      ],\n    }),\n  },\n];\n\nexport const createReplaceAction = () => {\n  return createTemplateAction({\n    id,\n    description:\n      'Replaces strings that match a regular expression pattern with a specified replacement string',\n    examples,\n    schema: {\n      input: schemaInput,\n    },\n\n    async handler(ctx) {\n      const input = ctx.input;\n\n      const values = {} as Record<string, string>;\n\n      for (const {\n        pattern,\n        flags: flagsInput,\n        replacement,\n        values: valuesInput,\n      } of input.regExps) {\n        // FIXME: remove `new Set()` when the `z.set()` issue is fixed\n        const flags = flagsInput\n          ? Array.from(new Set(flagsInput)).join('')\n          : '';\n        const regex = new RegExp(pattern, flags);\n\n        for (const { key, value } of valuesInput) {\n          const match = value.replace(regex, replacement);\n\n          if (values.hasOwnProperty(key)) {\n            throw new Error(\n              `The key '${key}' is used more than once in the input.`,\n            );\n          }\n\n          values[key] = match;\n        }\n      }\n\n      ctx.output('values', values);\n    },\n  });\n};\n","import { BackendDynamicPluginInstaller } from '@backstage/backend-plugin-manager';\n\nimport { createReplaceAction } from '../actions';\n\nexport const dynamicPluginInstaller: BackendDynamicPluginInstaller = {\n  kind: 'legacy',\n  scaffolder: () => [createReplaceAction()],\n};\n"],"names":["z","createTemplateAction"],"mappings":";;;;;;;;AAKA,MAAM,WAAA,GAAcA,MAAE,MAAO,CAAA;AAAA,EAC3B,SAASA,KAAE,CAAA,KAAA;AAAA,IACTA,MAAE,MAAO,CAAA;AAAA,MACP,OAAA,EAASA,KACN,CAAA,MAAA,EACA,CAAA,MAAA;AAAA;AAAA;AAAA;AAAA,QAIC,CACE,KAAA,KAAA,EACE,KAAM,CAAA,MAAA,CAAO,CAAC,CAAA,KAAM,GAAO,IAAA,KAAA,CAAM,MAAO,CAAA,KAAA,CAAM,MAAS,GAAA,CAAC,CAAM,KAAA,GAAA,CAAA;AAAA,QAElE;AAAA,UACE,OACE,EAAA,gGAAA;AAAA,SACJ;AAAA,OAED,CAAA,QAAA;AAAA,QACC,yEAAA;AAAA,OACF;AAAA,MACF,OAAOA,KACJ,CAAA,KAAA;AAAA;AAAA,QAECA,KAAA,CAAE,IAAK,CAAA,CAAC,GAAK,EAAA,GAAA,EAAK,KAAK,GAAK,EAAA,GAAA,EAAK,GAAK,EAAA,GAAG,CAAG,EAAA;AAAA,UAC1C,kBACE,EAAA,wDAAA;AAAA,SACH,CAAA;AAAA,OAEF,CAAA,QAAA,EACA,CAAA,QAAA,CAAS,yBAAyB,CAAA;AAAA,MACrC,WAAA,EAAaA,KACV,CAAA,MAAA,EACA,CAAA,QAAA;AAAA,QACC,wEAAA;AAAA,OACF;AAAA,MACF,QAAQA,KAAE,CAAA,KAAA;AAAA,QACRA,MAAE,MAAO,CAAA;AAAA,UACP,GAAK,EAAAA,KAAA,CAAE,MAAO,EAAA,CAAE,SAAS,mCAAmC,CAAA;AAAA,UAC5D,KAAO,EAAAA,KAAA,CAAE,MAAO,EAAA,CAAE,SAAS,8BAA8B,CAAA;AAAA,SAC1D,CAAA;AAAA,OACH;AAAA,KACD,CAAA;AAAA,GACH;AACF,CAAC,CAAA,CAAA;AAED,MAAM,YACJ,GAAA,sFAAA,CAAA;AAEF,MAAM,EAAK,GAAA,eAAA,CAAA;AAEX,MAAM,QAAW,GAAA;AAAA,EACf;AAAA,IACE,WAAa,EAAA,sDAAA;AAAA,IACb,OAAA,EAAS,KAAK,SAAU,CAAA;AAAA,MACtB,KAAO,EAAA;AAAA,QACL;AAAA,UACE,EAAI,EAAA,aAAA;AAAA,UACJ,MAAQ,EAAA,EAAA;AAAA,UACR,IAAM,EAAA,cAAA;AAAA,UACN,KAAO,EAAA;AAAA,YACL,OAAS,EAAA;AAAA,cACP;AAAA,gBACE,OAAS,EAAA,YAAA;AAAA,gBACT,WAAa,EAAA,IAAA;AAAA,gBACb,MAAQ,EAAA;AAAA,kBACN,EAAE,GAAA,EAAK,KAAO,EAAA,KAAA,EAAO,cAAe,EAAA;AAAA,kBACpC,EAAE,GAAA,EAAK,KAAO,EAAA,KAAA,EAAO,aAAc,EAAA;AAAA,iBACrC;AAAA,eACF;AAAA,aACF;AAAA,WACF;AAAA,SACF;AAAA,OACF;AAAA,KACD,CAAA;AAAA,GACH;AAAA,EACA;AAAA,IACE,WAAa,EAAA,8CAAA;AAAA,IACb,OAAA,EAAS,KAAK,SAAU,CAAA;AAAA,MACtB,KAAO,EAAA;AAAA,QACL;AAAA,UACE,EAAI,EAAA,aAAA;AAAA,UACJ,MAAQ,EAAA,EAAA;AAAA,UACR,IAAM,EAAA,cAAA;AAAA,UACN,KAAO,EAAA;AAAA,YACL,OAAS,EAAA;AAAA,cACP;AAAA,gBACE,OAAS,EAAA,KAAA;AAAA,gBACT,WAAa,EAAA,QAAA;AAAA,gBACb,MAAQ,EAAA;AAAA,kBACN;AAAA,oBACE,GAAK,EAAA,KAAA;AAAA,oBACL,KAAO,EAAA,YAAA;AAAA,mBACT;AAAA,iBACF;AAAA,eACF;AAAA,cACA;AAAA,gBACE,OAAS,EAAA,KAAA;AAAA,gBACT,WAAa,EAAA,QAAA;AAAA,gBACb,KAAA,EAAO,CAAC,GAAG,CAAA;AAAA,gBACX,MAAQ,EAAA;AAAA,kBACN;AAAA,oBACE,GAAK,EAAA,KAAA;AAAA,oBACL,KAAO,EAAA,YAAA;AAAA,mBACT;AAAA,iBACF;AAAA,eACF;AAAA,aACF;AAAA,WACF;AAAA,SACF;AAAA,OACF;AAAA,KACD,CAAA;AAAA,GACH;AAAA,EACA;AAAA,IACE,WAAa,EAAA,uDAAA;AAAA,IACb,OAAA,EAAS,KAAK,SAAU,CAAA;AAAA,MACtB,KAAO,EAAA;AAAA,QACL;AAAA,UACE,EAAI,EAAA,aAAA;AAAA,UACJ,MAAQ,EAAA,EAAA;AAAA,UACR,IAAM,EAAA,cAAA;AAAA,UACN,KAAO,EAAA;AAAA,YACL,OAAS,EAAA;AAAA,cACP;AAAA,gBACE,OAAS,EAAA,KAAA;AAAA,gBACT,WAAa,EAAA,QAAA;AAAA,gBACb,KAAA,EAAO,CAAC,GAAG,CAAA;AAAA,gBACX,MAAQ,EAAA;AAAA,kBACN;AAAA,oBACE,GAAK,EAAA,KAAA;AAAA,oBACL,KAAO,EAAA,YAAA;AAAA,mBACT;AAAA,iBACF;AAAA,eACF;AAAA,cACA;AAAA,gBACE,OAAS,EAAA,KAAA;AAAA,gBACT,WAAa,EAAA,QAAA;AAAA,gBACb,KAAA,EAAO,CAAC,IAAI,CAAA;AAAA,gBACZ,MAAQ,EAAA;AAAA,kBACN;AAAA,oBACE,GAAK,EAAA,KAAA;AAAA,oBACL,KAAO,EAAA,YAAA;AAAA,mBACT;AAAA,iBACF;AAAA,eACF;AAAA,aACF;AAAA,WACF;AAAA,SACF;AAAA,OACF;AAAA,KACD,CAAA;AAAA,GACH;AACF,CAAA,CAAA;AAEO,MAAM,sBAAsB,MAAM;AACvC,EAAA,OAAOC,yCAAqB,CAAA;AAAA,IAC1B,EAAA;AAAA,IACA,WACE,EAAA,8FAAA;AAAA,IACF,QAAA;AAAA,IACA,MAAQ,EAAA;AAAA,MACN,KAAO,EAAA,WAAA;AAAA,KACT;AAAA,IAEA,MAAM,QAAQ,GAAK,EAAA;AACjB,MAAA,MAAM,QAAQ,GAAI,CAAA,KAAA,CAAA;AAElB,MAAA,MAAM,SAAS,EAAC,CAAA;AAEhB,MAAW,KAAA,MAAA;AAAA,QACT,OAAA;AAAA,QACA,KAAO,EAAA,UAAA;AAAA,QACP,WAAA;AAAA,QACA,MAAQ,EAAA,WAAA;AAAA,OACV,IAAK,MAAM,OAAS,EAAA;AAElB,QAAM,MAAA,KAAA,GAAQ,UACV,GAAA,KAAA,CAAM,IAAK,CAAA,IAAI,GAAI,CAAA,UAAU,CAAC,CAAA,CAAE,IAAK,CAAA,EAAE,CACvC,GAAA,EAAA,CAAA;AACJ,QAAA,MAAM,KAAQ,GAAA,IAAI,MAAO,CAAA,OAAA,EAAS,KAAK,CAAA,CAAA;AAEvC,QAAA,KAAA,MAAW,EAAE,GAAA,EAAK,KAAM,EAAA,IAAK,WAAa,EAAA;AACxC,UAAA,MAAM,KAAQ,GAAA,KAAA,CAAM,OAAQ,CAAA,KAAA,EAAO,WAAW,CAAA,CAAA;AAE9C,UAAI,IAAA,MAAA,CAAO,cAAe,CAAA,GAAG,CAAG,EAAA;AAC9B,YAAA,MAAM,IAAI,KAAA;AAAA,cACR,YAAY,GAAG,CAAA,sCAAA,CAAA;AAAA,aACjB,CAAA;AAAA,WACF;AAEA,UAAA,MAAA,CAAO,GAAG,CAAI,GAAA,KAAA,CAAA;AAAA,SAChB;AAAA,OACF;AAEA,MAAI,GAAA,CAAA,MAAA,CAAO,UAAU,MAAM,CAAA,CAAA;AAAA,KAC7B;AAAA,GACD,CAAA,CAAA;AACH;;ACrMO,MAAM,sBAAwD,GAAA;AAAA,EACnE,IAAM,EAAA,QAAA;AAAA,EACN,UAAY,EAAA,MAAM,CAAC,mBAAA,EAAqB,CAAA;AAC1C;;;;;"}